/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:
 **************************************************************************** */

import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.RectHV;
import edu.princeton.cs.algs4.StdOut;

import java.util.ArrayList;
import java.util.List;


public class KdTree {

    private static class Node {
        private Point2D p;
        private RectHV rect;
        private Node lb;
        private Node rt;

        public Node(Point2D p) {
            this.p = p;
        }

    }

    private Node root;
    private int size;

    public KdTree() {

        // construct an empty set of points
        this.root = new Node(null);
        this.size = 0;
    }

    public boolean isEmpty() {
        // is the set empty?
        return root.p == null;
    }

    public int size() {
        // number of points in the set
        return size;
    }

    public void insert(Point2D p) {
        // add the point to the set (if it is not already in the set)
        // tree.insert(p);
        root = insert(root, p, 0);
    }

    private Node insert(Node node, Point2D p, int level) {
        if (node == null) {
            size = size + 1;
            return new Node(p);
        }

        if (node.p == null) {
            size = size +1;
            node.p = p;
            return node;
        }

        if (p.x() == node.p.x() && p.y() == node.p.y()) {
            return node;
        }

        if (level % 2 == 0) {
            // Compare on x
            if (p.x() >= node.p.x()) { node.rt = insert(node.rt, p, level + 1); }
            if (p.x()  < node.p.x()) { node.lb = insert(node.lb, p, level + 1); }
        }

        if (level % 2 != 0) {
            // Compare on y
            if (p.y() >= node.p.y()) { node.rt = insert(node.rt, p, level + 1); }
            if (p.y()  < node.p.y()) { node.lb = insert(node.lb, p, level + 1); }
        }
        return node;
    }

    public boolean contains(Point2D p) {
        // does the set contain point p?
        return contains(root, p, 0);
    }

    private boolean contains(Node node, Point2D p, int level) {
        if (node == null) { return false; }
        if (node.p == p)  { return true;  }

        if (level % 2 == 0) {
            // Compare on x
            if (p.x() >= node.p.x()) { return contains(node.rt, p, level + 1); }
            if (p.x()  < node.p.x()) { return contains(node.lb, p, level + 1); }
        }

        if (level % 2 != 0) {
            // Compare on y
            if (p.y() >= node.p.y()) { return contains(node.rt, p, level + 1); }
            if (p.y()  < node.p.y()) { return contains(node.lb, p, level + 1); }
        }
        return false;
    }

    public void draw() {
        // draw all points to standard draw
    }

    public Iterable<Point2D> range(RectHV rect) {
        // all points that are inside the rectangle (or on the boundary)
        List<Point2D> points = new ArrayList<Point2D>();
        range(root, rect, points);
        return points;
    }

    private void range(Node node, RectHV rect, List<Point2D> points) {
        // TODO: Optimize recursive calls
        if (node != null && node.p != null) {
            if (rect.contains(node.p)) {
                points.add(node.p);
            }

            range(node.rt, rect, points);
            range(node.lb, rect, points);
        }
    }

    public Point2D nearest(Point2D p) {
        // a nearest neighbor in the set to point p; null if the set is empty
        return null;
    }

    public static void main(String[] args) {
        KdTree kdtree = new KdTree();

        System.out.println(kdtree.isEmpty());

        Point2D p1 = new Point2D(0.0, 0);
        Point2D p2 = new Point2D(0.2, 1);
        Point2D p3 = new Point2D(0.3, 2);
        Point2D p4 = new Point2D(0.5, 3);
        Point2D p5 = new Point2D(-0.1, 4);

        System.out.println(kdtree.isEmpty());

        kdtree.insert(p1);
        kdtree.insert(p2);
        kdtree.insert(p3);
        kdtree.insert(p4);
        kdtree.insert(p5);

        RectHV rect = new RectHV(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);

        for (Point2D p : kdtree.range(rect)) {
            StdOut.printf("%8.6f %8.6f\n", p.x(), p.y());
        }

        System.out.println(kdtree.size());
        System.out.println(kdtree.contains(p5));
        System.out.println(kdtree.contains(new Point2D(0.1, 13)));
    }                 // unit testing of the methods (optional)
}
